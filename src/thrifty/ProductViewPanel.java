/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package thrifty;

import com.fasterxml.jackson.databind.SerializationFeature;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import static thrifty.RegisterForm.random;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static thrifty.Dashboard.mapper;
import thrifty.shopUIs.SPInfo;
/**
 *
 * @author User
 */
public class ProductViewPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProductViewPanel
     */
    Dashboard db;
    public HashMap<String,OrderDTO> orders;
    private ProductDTO product;
    private UserDTO user;
    ShopDTO shop;
    HashMap<String,ShopDTO> allShops;
    HashMap<String,UserDTO> allUsers;
    ArrayList<String> cart;
    ArrayList<String> orderList;
    ArrayList<String> cart1;
    public ProductViewPanel() {
        initComponents();
    }
    
    public ProductViewPanel(String name, String price, String quantity, String description, String pictureIMG, Dashboard db,ProductDTO product,ShopDTO shop) {
        initComponents();
        orders = db.getOrder();
        user = db.getUser();
        this.shop = shop;
        allShops = db.getShop();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        allUsers = db.getUserFiles();
        cart = db.getCart();
        orderList = allShops.get(product.getStoreID()).getOrders();
        cart1 = allUsers.get(user.getUserID()).getCart();
        this.name.setText(name);
        this.price.setText(price);
        this.description.setText(description);
        this.quantity.setText("1");
        String displayAddress = allShops.get(product.getStoreID()).getAddress();
        this.address.setText(displayAddress);
        icon(pictureIMG,picture,451,587);
        this.db = db;
        this.product = product;
    }
    
    public static void icon(String path, JLabel component,int width, int height){
        ImageIcon imageIcon =  new ImageIcon(path);
        Image img = imageIcon.getImage();
        Image imageScaled = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imageScaled);
        component.setIcon(scaledIcon);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        picture = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        visitShopButton = new javax.swing.JButton();
        price = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        quantity = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        address = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();

        jButton1.setFont(new java.awt.Font("Outfit", 1, 18)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        picture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        name.setFont(new java.awt.Font("Roboto", 0, 48)); // NOI18N
        name.setText("Name");

        visitShopButton.setBackground(new java.awt.Color(238, 9, 9));
        visitShopButton.setFont(new java.awt.Font("Outfit", 1, 24)); // NOI18N
        visitShopButton.setForeground(new java.awt.Color(255, 255, 255));
        visitShopButton.setText("Visit Shop");
        visitShopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitShopButtonActionPerformed(evt);
            }
        });

        price.setFont(new java.awt.Font("Roboto", 1, 64)); // NOI18N
        price.setForeground(new java.awt.Color(238, 9, 9));
        price.setText("P200");

        jButton3.setFont(new java.awt.Font("Outfit", 1, 24)); // NOI18N
        jButton3.setText("-");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        quantity.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        quantity.setText("1");

        jButton4.setFont(new java.awt.Font("Outfit", 0, 24)); // NOI18N
        jButton4.setText("+");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout(10, 0));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thrifty/resources/circle 1.png"))); // NOI18N
        jPanel1.add(jLabel4, java.awt.BorderLayout.LINE_START);

        address.setText("address");
        jPanel1.add(address, java.awt.BorderLayout.CENTER);

        description.setEditable(false);
        description.setColumns(20);
        description.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        description.setLineWrap(true);
        description.setRows(5);
        description.setText("Lorem ipsum dolor sit amet. Et perferendis architecto et necessitatibus saepe quo unde quia sed omnis porro id fugiat velit qui obcaecati iste. Sit nobis accusantium sed nulla autem aut labore consectetur qui pariatur voluptatem. Ut dolorum reiciendis non sunt eaque et beatae incidunt quo perferendis soluta et obcaecati quia.Lorem ipsum dolor sit amet. Et perferendis architecto et necessitatibus saepe quo unde quia sed omnis porro id fugiat velit qui obcaecati iste. Sit nobis accusantium sed nulla autem aut labore consectetur qui pariatur voluptatem. Ut dolorum reiciendis non sunt eaque et beatae incidunt quo perferendis soluta et obcaecati quia.Lorem ipsum dolor sit amet. Et perferendis architecto et necessitatibus saepe quo unde quia sed omnis porro id fugiat velit qui obcaecati iste. Sit nobis accusantium sed nulla autem aut labore consectetur qui pariatur voluptatem. Ut dolorum reiciendis non sunt eaque et beatae incidunt quo perferendis soluta et obcaecati quia.");
        description.setWrapStyleWord(true);
        description.setBorder(null);
        jScrollPane1.setViewportView(description);

        jButton6.setBackground(new java.awt.Color(238, 9, 9));
        jButton6.setFont(new java.awt.Font("Outfit", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Checkout");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(price)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addGap(18, 18, 18)
                                        .addComponent(quantity)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4))
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(visitShopButton)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(visitShopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(price)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(quantity)
                                .addComponent(jButton4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int temp;
        String quantityLabel = quantity.getText();
        if (Integer.valueOf(quantityLabel) == 1){
            temp = 1;
        }else{
            temp = Integer.valueOf(quantityLabel) - 1;
        }
        String newQLabel = String.valueOf(temp);
        quantity.setText(newQLabel);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String quantityLabel = quantity.getText();
        int temp = Integer.valueOf(quantityLabel) + 1;
        String newQLabel = String.valueOf(temp);
        quantity.setText(newQLabel);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        db.dashboard();
        db.back();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // TODO add your handling code here:
        
       
        
    }//GEN-LAST:event_jButton6MouseClicked
    
    public OrderDTO orderChecker(OrderDTO newOrder){
        
        for (String orderID : cart){
            String productID  = orders.get(orderID).getProductID();
            String newProductID = newOrder.getProductID();
            if (productID.equals(newProductID)){
                // remove the old orders, and make a new one 
                cart.remove(orderID);
                cart1.remove(orderID);
                
                OrderDTO oldOrder = orders.get(orderID);
                
                 //public OrderDTO(OrderDTO order, int quantitySold,double totalPrice){
                //    change only the quantity sold and the total price
                int newQuantity = oldOrder.getQuantitySold() + newOrder.getQuantitySold();
                double newTotalPrice = oldOrder.getTotalPrice() + newOrder.getTotalPrice();
                OrderDTO updatedOrder = new OrderDTO(newOrder, newQuantity,newTotalPrice);
                
                  
                // update order hashmap
                orders.remove(orderID);
                orders.put(updatedOrder.getOrderID(), updatedOrder);

                // forming a link to Orders arraylist inside the shop
                ShopDTO oldProductShop = allShops.get(product.getStoreID());
                
                // Updating the order arraylist of the specific 
                orderList.remove(orderID);
                orderList.add(updatedOrder.getOrderID());
                
                
                
                cart1.add(updatedOrder.getOrderID());
                cart.add(updatedOrder.getOrderID());  
                
                return updatedOrder;
                
                
            }
        }
        orders.put(newOrder.getOrderID(), newOrder);
        orderList.add(newOrder.getOrderID());
        cart1.add(newOrder.getOrderID());
        cart.add(newOrder.getOrderID());
        
        
        return newOrder;
    }
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        orders = db.getOrder();
        user = db.getUser();
        shop = db.getUserShop();
        allShops = db.getShop();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        allUsers = db.getUserFiles();
        cart = db.getCart();
        orderList = allShops.get(product.getStoreID()).getOrders();
        cart1 = allUsers.get(user.getUserID()).getCart();
        int quantitySold = Integer.valueOf(quantity.getText());
        
        
        if (user.getShopID().equals(product.getStoreID())){
            JOptionPane.showMessageDialog(db, "Cannot checkout an item that you listed", "Error", JOptionPane.ERROR_MESSAGE);
            
        }else if (quantitySold > product.getQuantity()){
            JOptionPane.showMessageDialog(db, "Cannot buy more than stock quantity" + "(" + product.getQuantity() + ")"  , "Error", JOptionPane.ERROR_MESSAGE);
            quantity.setText("1");
        }
        else{
            String orderID = generateID(createIDKey());
        
        
        
        double totalPrice = quantitySold * Double.valueOf(product.getPrice());
         
        
        // create order object
        //    public OrderDTO(String orderID,String productID, int quantitySold, String buyerID, String dateBought, int totalPrice){
        OrderDTO newOrder = new OrderDTO(orderID,product.getId(),quantitySold,user.getUserID(),getCurrentDate(),totalPrice,product.getStoreID(),product.getPrice(),product);
        
        OrderDTO updatedOrder = orderChecker(newOrder);
      
        // Obtaining the shop where the product is from where the orderlist is updated
        
        
        //update user by adding it to cart huhu
        
        
        
        
        try {
            //public ShopDTO(String shopID,String shopName, String ownerName, String address, String city, String businessType, String phoneNumber, String email, String description,List<String> products,ArrayList<String> orders,List<String> sellLog){
//
//        ShopDTO newProductShop = new ShopDTO(oldProductShop);
//        allShops.remove(newProductShop.getShopID());
//        allShops.put(newProductShop.getShopID(), newProductShop);
            mapper.writeValue(new File(".\\shops.json"), this.allShops);
            mapper.writeValue(new File(".\\orders.json"), orders);
            mapper.writeValue(new File(".\\userFiles.json"), allUsers);
            
        } catch (IOException ex) {
            Logger.getLogger(ProductViewPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
        }
        
        //create id
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void visitShopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitShopButtonActionPerformed
        SPInfo shopInfo = new SPInfo(shop,db);
        db.displayShop(shopInfo);
    }//GEN-LAST:event_visitShopButtonActionPerformed
    
    public static String getCurrentDate(){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate currentDate = LocalDate.now();
        return currentDate.format(formatter);
    }
    public String generateID(String ID){ //recursion for creating ID and checks if it exists
     //ID = Ux where x is a number, U means user
     for (String key : orders.keySet()){
         if (key.equals(ID)){ // if ID key exists then create ID
             String newKey = createIDKey(); 
             return generateID(newKey);
         }
     }

     return ID;
 }

 public static String createIDKey(){ //create ID key
     int randomNumber = random.nextInt(100000);
     String idNum = String.valueOf(randomNumber);
     String key = "O".concat(idNum);
     return key;

 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JTextArea description;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel name;
    private javax.swing.JLabel picture;
    private javax.swing.JLabel price;
    private javax.swing.JLabel quantity;
    private javax.swing.JButton visitShopButton;
    // End of variables declaration//GEN-END:variables
}
